name: CD Pipeline

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - '.gitignore'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Manual deployment environment'
        type: environment
        required: true

env:
  TURBO_TEAM: ${{ vars.TURBO_TEAM }}
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}

jobs:
  deploy-to-staging:
    concurrency:
      group: deploy-staging
      cancel-in-progress: true
    name: Deploy Encapsulate to Staging
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment:
      name: staging
      url: ${{ vars.NEXT_PUBLIC_URL }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      # Restore cached node_modules
      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Prune developer dependencies
        run: pnpm install --prod --frozen-lockfile

      - name: Restore Next cache
        uses: actions/cache@v4
        with:
           path: .next/cache
           key: ${{ runner.os }}-nextjs-${{ hashFiles('**/*.ts', '**/*.tsx') }}
           restore-keys: |
             ${{ runner.os }}-nextjs-

      - name: Run Next build
        run: pnpm turbo:build

      - name: Remove standalone node_modules
        run: rm -rf ./.next/standalone/node_modules

      - name: Prepare directory structure for deployment
        run: |
          mkdir -p deploy/standalone
          cp -r ./.next/standalone/. deploy/standalone/
          mkdir -p deploy/standalone/.next/static
          cp -r ./.next/static/. deploy/standalone/.next/static/
          cp -r ./public/. deploy/standalone/public/
          cp ./pnpm-lock.yaml deploy/standalone/
          cp ./Dockerfile deploy/standalone/Dockerfile
          cp ./docker-compose.yml deploy/standalone/docker-compose.yml

      - name: Upload combined directory to EC2
        uses: burnett01/rsync-deployments@7.0.2
        with:
          switches: -avz --delete
          path: ./deploy/standalone/
          remote_path: ~/standalone/
          remote_host: ${{ secrets.EC2_HOST }}
          remote_user: ${{ secrets.EC2_USERNAME }}
          remote_key: ${{ secrets.EC2_SSH_KEY }}

      - name: Connect to server via SSH and store secrets
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/standalone

            echo "storing secrets"
            echo "DATABASE_URI=${{ secrets.DATABASE_URI }}" >> .env
            echo "PAYLOAD_SECRET=${{ secrets.PAYLOAD_SECRET }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "NEXT_PUBLIC_URL=${{ vars.NEXT_PUBLIC_URL }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}" >> .env
            echo "S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> .env
            echo "S3_REGION=${{ vars.S3_REGION }}" >> .env
            echo "S3_BUCKET=${{ vars.S3_BUCKET }}" >> .env
            echo "NEXT_PUBLIC_TURNSTILE_SITE_KEY=${{ secrets.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}" >> .env
            echo "TURNSTILE_SECRET_KEY=${{ secrets.TURNSTILE_SECRET_KEY }}" >> .env

            echo "Stopping old containers"
            docker-compose down

            echo "Rebuilding and starting containers"
            docker-compose up -d --build

            echo "Removing old images after build"
            docker system prune -f

  deploy-to-production:
    concurrency:
      group: deploy-production
      cancel-in-progress: true
    name: Deploy Encapsulate to Production
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production'
    environment:
      name: production
      url: ${{ vars.NEXT_PUBLIC_URL }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false

      # Restore cached node_modules
      - name: Restore node_modules
        uses: actions/cache@v4
        with:
          path: node_modules
          key: node-modules-${{ hashFiles('pnpm-lock.yaml') }}

      - name: Prune developer dependencies
        run: pnpm install --prod --frozen-lockfile

      - name: Restore Next cache
        uses: actions/cache@v4
        with:
           path: .next/cache
           key: ${{ runner.os }}-nextjs-${{ hashFiles('**/*.ts', '**/*.tsx') }}
           restore-keys: |
             ${{ runner.os }}-nextjs-

      - name: Run Next build
        run: pnpm turbo:build

      - name: Remove standalone node_modules
        run: rm -rf ./.next/standalone/node_modules

      - name: Prepare directory structure for deployment
        run: |
          mkdir -p deploy/standalone
          cp -r ./.next/standalone/. deploy/standalone/
          mkdir -p deploy/standalone/.next/static
          cp -r ./.next/static/. deploy/standalone/.next/static/
          cp -r ./public/. deploy/standalone/public/
          cp ./pnpm-lock.yaml deploy/standalone/
          cp ./Dockerfile deploy/standalone/Dockerfile
          cp ./docker-compose.yml deploy/standalone/docker-compose.yml

      - name: Upload combined directory to EC2
        uses: burnett01/rsync-deployments@7.0.2
        with:
          switches: -avz --delete
          path: ./deploy/standalone/
          remote_path: ~/standalone/
          remote_host: ${{ secrets.EC2_HOST }}
          remote_user: ${{ secrets.EC2_USERNAME }}
          remote_key: ${{ secrets.EC2_SSH_KEY }}

      - name: Connect to server via SSH and store secrets
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          port: 22
          script: |
            cd ~/standalone

            echo "storing secrets"
            echo "DATABASE_URI=${{ secrets.DATABASE_URI }}" >> .env
            echo "PAYLOAD_SECRET=${{ secrets.PAYLOAD_SECRET }}" >> .env
            echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env
            echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env
            echo "NEXT_PUBLIC_URL=${{ vars.NEXT_PUBLIC_URL }}" >> .env
            echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
            echo "S3_ACCESS_KEY_ID=${{ secrets.S3_ACCESS_KEY_ID }}" >> .env
            echo "S3_SECRET_ACCESS_KEY=${{ secrets.S3_SECRET_ACCESS_KEY }}" >> .env
            echo "S3_REGION=${{ vars.S3_REGION }}" >> .env
            echo "S3_BUCKET=${{ vars.S3_BUCKET }}" >> .env
            echo "NEXT_PUBLIC_TURNSTILE_SITE_KEY=${{ secrets.NEXT_PUBLIC_TURNSTILE_SITE_KEY }}" >> .env
            echo "TURNSTILE_SECRET_KEY=${{ secrets.TURNSTILE_SECRET_KEY }}" >> .env

            echo "Stopping old containers"
            docker-compose down

            echo "Rebuilding and starting containers"
            docker-compose up -d --build

            echo "Removing old images after build"
            docker system prune -f
